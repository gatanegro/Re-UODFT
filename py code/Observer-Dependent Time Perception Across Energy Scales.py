# Step 3: Computing Time Perception Across Different Energy Scales

# Define a function to compute time perception transformation
def quantum_time_perception(E, T0=1, beta=0.1):
    """Computes perceived time intervals based on observational energy scaling."""
    return T0 * np.exp(-beta * E)

# Generate an energy scale from low (Newtonian) to high (quantum)
energy_levels = np.linspace(0, 10, 100)

# Compute perceived time intervals at different energy densities
time_perception = [quantum_time_perception(E) for E in energy_levels]

# Plot perceived time intervals across energy scales
plt.figure(figsize=(10, 6))
plt.plot(energy_levels, time_perception, label="Perceived Time Interval", color="blue")
plt.xlabel("Energy Density (E)")
plt.ylabel("Perceived Time Interval (T_obs)")
plt.title("Observer-Dependent Time Perception Across Energy Scales")
plt.legend()
plt.grid(True)
plt.show()

# Return computed time perception values
time_perception
Result
[1.0,
 0.9899498337660453,
 0.9800006733734207,
 0.9701515036966302,
 0.9604013198123579,
 0.950749126896934,
 0.9411939401248325,
 0.9317347845681871,
 0.9223706950973187,
 0.9131007162822624,
 0.9039239022952824,
 0.8948393168143698,
 0.8858460329277068,
 0.876943133039094,
 0.868129708774326,
 0.8594048608885093,
 0.8507676991743109,
 0.84221734237113,
 0.8337529180751806,
 0.8253735626504801,
 0.8170784211407313,
 0.8088666471820897,
 0.8007374029168081,
 0.7926898589077489,
 0.7847231940537559,
 0.7768365955058757,
 0.7690292585844222,
 0.7613003866968738,
 0.7536491912565961,
 0.7460748916023818,
 0.7385767149187981,
 0.731153896157336,
 0.723805677958351,
 0.7165313105737893,
 0.7093300517906893,
 0.702201166855453,
 0.6951439283988787,
 0.6881576163619456,
 0.681241517922346,
 0.6743949274217548,
 0.6676171462938303,
 0.6609074829929388,
 0.6542652529235952,
 0.6476897783706126,
 0.6411803884299545,
 0.6347364189402819,
 0.6283572124151868,
 0.6220421179761098,
 0.6157904912859286,
 0.6096016944832163,
 0.6034750961171595,
 0.5974100710831303,
 0.591406000558906,
 0.5854622719415307,
 0.5795782787848095,
 0.5737534207374327,
 0.5679871034817214,
 0.5622787386729876,
 0.5566277438795058,
 0.5510335425230856,
 0.5454955638202436,
 0.5400132427239651,
 0.5345860198660524,
 0.5292133415000503,
 0.523894659444748,
 0.5186294310282473,
 0.513417119032592,
 0.5082571916389563,
 0.5031491223733818,
 0.49809239005306094,
 0.49308647873315975,
 0.4881308776541762,
 0.48322508118982543,
 0.47836858879545135,
 0.47356090495695474,
 0.4688015391402353,
 0.46409000574114206,
 0.4594258240359266,
 0.45480851813219386,
 0.4502376169203467,
 0.4457126540255176,
 0.44123316775998395,
 0.43679870107606167,
 0.4324088015194717,
 0.4280630211831759,
 0.42376091666167603,
 0.4195020490057732,
 0.4152859836777805,
 0.4111122905071874,
 0.4069805436467683,
 0.402890321529133,
 0.3988412068237137,
 0.3948327863941843,
 0.39086465125630715,
 0.3869363965362045,
 0.38304762142904825,
 0.37919792915816536,
 0.3753869269345544,
 0.3716142259168086,
 0.3678794411714424]

